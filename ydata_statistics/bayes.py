# To add a new cell, type '# %%'
# To add a new markdown cell, type '# %% [markdown]'
# %% [markdown]
# ## Gathered Notebook
# 
# This notebook was generated by the Gather Extension. The intent is that it contains only the code and cells required to produce the same results as the cell originally selected for gathering. Please note that the Python analysis is quite conservative, so if it is unsure whether a line of code is necessary for execution, it will err on the side of including it.
# 
# **Please let us know if you are satisfied with what was gathered [here](https://aka.ms/gatherfeedback).**
# 
# Thanks

# %%
import pandas as pd # the library for working with data tables
import re
from collections import Counter # a class for counting objects (words and text labels, in our case)


# %%
data = pd.read_csv(r'C:\Users\sfrie\Ydata\ydata_statistics\text.txt', sep='\t', header=None)
data.columns = ['target', 'text']


# %%
def get_words(text):
    """ This function converts the given text into an unordered and uncounted bag of words. """
    return set(re.split('\W+', text)).difference({''}) #difference between the set, and ''
# just an example


# %%
bags_of_words = [get_words(text) for text in data.text]


# %%
n_train = 3000
train_x, test_x, train_y, test_y = bags_of_words[:n_train], bags_of_words[n_train:], data.target[:n_train], data.target[n_train:]


# %%
label_counter = Counter()
word_counters = {
    'spam': Counter(), 
    'ham': Counter()
}
all_words = set()
for label, words in zip(train_y, train_x): #creates tuple of iterables, by iteration.
    label_counter.update({label}) # Needs '{}' to keep the whole word, instead of counting each letter


# %%
def word_probability_given_label(word, label):
    """ This function calculates probability of a word occurence in text, conditional on the label of this text. """
    # TODO: calculate and return this probability 
    # as ratio of number of texts with this word and label to number of texts with this label
    p = 0.1
    a = 1^(3)
    count = word_counters[label][word] + a*p  / (label_counter[label] + p)
    return count


# %%
def text_probability_given_label(text, label):
    """ This function calculates probability of the text conditional on its label. """
    if isinstance(text, str):
        text = get_words(text)
    probability = 1.0
    in_text = 0
    outof_text = 0
    # TODO: calculate the probability of text given label. 
    # use a function defined above and the naive assumption of word independence
    for word in all_words:
        if word in text:
            in_text = in_text * word_probability_given_label(word, label)
        else:
            outof_text = outof_text * 1- word_probability_given_label(word, label)
    print(in_text)
    print(outof_text)
    return in_text * outof_text
greeting1 = 'hello how are you'
greeting2 = 'hello teacher how are you'
print(text_probability_given_label(greeting1, 'ham'))
assert text_probability_given_label(greeting1, 'ham') > 0
assert text_probability_given_label(greeting1, 'ham') < 0.0001
assert text_probability_given_label(greeting2, 'ham') < text_probability_given_label(greeting1, 'ham')


